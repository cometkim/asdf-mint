#!/bin/bash

set -eo pipefail

# shellcheck source=../lib/utils.sh
source "$(dirname "$0")/../lib/utils.sh"

function install_version() {
  local version=$1
  local install_path=$2

  local platform=$(get_platform)
  local bin_url=$(get_bin_url $version $platform)

  (
    set -e
    mkdir -p $install_path/bin

    echo "Installing Mint v$version"
    curl -sSfLo $install_path/bin/mint $bin_url || fail "Couldn't download the Mint binary from $bin_url"

    chmod +x $install_path/bin/mint
  ) || (rm -rf $install_path; exit 1)
}

function install_ref() {
  local ref=$1
  local install_path=$2

  local download_path
  if [[ -v $ASDF_DOWNLOAD_PATH ]]; then
    download_path=$ASDF_DOWNLOAD_PATH
  else
    local tmpdir=$(get_temp_dir)
    trap "rm -rf $tmpdir" EXIT
    download_path=$tmpdir
    download_source $ref $download_path
  fi

  (
    mkdir -p $install_path/bin

    cd $download_path

    echo "Building Mint from source"
    shards install || fail "Couldn't install dependencies"
    crystal build src/mint.cr -o $install_path/bin/mint -p --release --no-debug || fail "Couldn't build release binary"
    chmod +x $install_path/bin/mint
  ) || (rm -rf $install_path; exit 1)
}

function check_build_dependencies() {
  if ! (command -v crystal && command -v shards) &> /dev/null; then
    echo "Crystal environment is required to build Mint from source"
    echo
    echo "You can install Crystal via asdf-crystal plugin"
    echo "$ asdf plugin add crystal"

    exit 1
  fi
}

install_type=$ASDF_INSTALL_TYPE

if [[ $install_type == "version" ]]; then
  install_version $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
else
  check_build_dependencies
  install_ref $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
fi
